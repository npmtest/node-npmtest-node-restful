{"/home/travis/build/npmtest/node-npmtest-node-restful/test.js":"/* istanbul instrument in package npmtest_node_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-restful/lib.npmtest_node_restful.js":"/* istanbul instrument in package npmtest_node_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_restful = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_restful = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-restful/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-restful && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_restful\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_restful.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_restful.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_restful.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_restful.__dirname +\n                    '/lib.npmtest_node_restful.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-restful/node_modules/node-restful/index.js":"module.exports = process.env.RESTFUL_COV\n  ? require('./lib-cov/restful')\n  : require('./lib/restful');\n","/home/travis/build/npmtest/node-npmtest-node-restful/node_modules/node-restful/lib/restful.js":"var model = require('./model'),\n    handlers = require('./handlers'),\n    mongoose = require('mongoose');\n\nexports = module.exports = handlers;\nexports.model = model;\nexports.mongoose = mongoose;\n","/home/travis/build/npmtest/node-npmtest-node-restful/node_modules/node-restful/lib/model.js":"var mongoose = require('mongoose'),\n    _ = require('underscore'),\n    Model = mongoose.Model,\n    handlers = require('./handlers');\n\nexports = module.exports = model;\n\nvar methods = ['get', 'post', 'put', 'delete'], // All HTTP methods, PATCH not currently supported\n  endpoints = ['get', 'post', 'put', 'delete', 'getDetail'],\n  defaultroutes = ['schema'],\n  lookup = {\n    'get': 'index',\n    'getDetail': 'show',\n    'put': 'updated',\n    'post': 'created',\n    'delete': 'deleted'\n  },\n  valid_alterables = filterable({\n      'populate': query('populate'),\n    }, {});\n  valid_filters = filterable({\n      'limit': query('limit'),\n      'skip': query('skip'),\n      'offset': query('offset'),\n      'select': query('select'),\n      'sort': query('sort'),\n    }, {\n      'equals': query('equals'),\n      'gte': query('gte'),\n      'gt': query('gt'),\n      'lt': query('lt'),\n      'lte': query('lte'),\n      'ne': query('ne'),\n      'regex': function(val, query) {\n        var regParts = val.match(/^\\/(.*?)\\/([gim]*)$/);\n        if (regParts) {\n          // the parsed pattern had delimiters and modifiers. handle them.\n          val = new RegExp(regParts[1], regParts[2]);\n        } else {\n          // we got pattern string without delimiters\n          val = new RegExp(val);\n        }\n\n        return query.regex(val);\n      },\n      'in': query('in'),\n      'nin': query('nin'),\n    });\n  defaults = function() {\n    return {\n      routes: {},\n      allowed_methods: {\n        get: { detail: false }\n      },\n      update_options: {},\n      remove_options: {},\n      templateRoot: '',\n      shouldIncludeSchema: true,\n      shouldUseAtomicUpdate: true\n    };\n  };\n\n/**\n * Returns the model associated with the given name or\n * registers the model with mongoose\n */\nfunction model() {\n  var result = mongoose.model.apply(mongoose, arguments),\n      default_properties = defaults();\n  if (1 === arguments.length) return result;\n\n  for (var key in default_properties) {\n   result[key] = default_properties[key];\n  }\n\n  return result;\n}\n\nModel.includeSchema = function(shouldIncludeSchema) {\n  this.shouldIncludeSchema = shouldIncludeSchema;\n  return this;\n};\n\nModel.methods = function(newmethods) {\n  var self = this,\n    get = contains(newmethods, 'get');\n\n  methods.forEach(function(method) {\n    delete self.routes[method];\n  });\n\n  this.allowed_methods = [];\n  if (!Array.isArray(newmethods)) {\n    newmethods = [newmethods];\n  }\n  if (get && !contains(newmethods, 'getDetail')) {\n    newmethods.push({\n      method: 'getDetail',\n      before: (typeof get !== 'string') ? get.before : null,\n      after: (typeof get !== 'string') ? get.after : null\n    });\n  }\n  newmethods.forEach(function(meth) {\n    var method = meth.method;\n    if ('string' === typeof meth) {\n      method = meth;\n      meth = {};\n    }\n    if (!method) throw new Error(\"Method object must have a method property\");\n    self.allowed_methods.push(method);\n\n    meth.handler = handlers[method];\n    meth.detail = (method !== 'get' && method !== 'post');\n    self.route(method, meth);\n  });\n  return this;\n};\n\nModel.updateOptions = function(options) {\n  this['update_options'] = options;\n  return this;\n};\n\nModel.removeOptions = function(options) {\n  this['remove_options'] = options;\n  return this;\n};\n\nModel.template = function(templatePath) {\n  if (templatePath.substr(-1) == '/') {\n    templatePath = templatePath.substr(0, templatePath.length - 1);\n  }\n  this.templateRoot = templatePath;\n  return this;\n};\n\n/**\n * Adds the default routes for the HTTP methods and one to get the schema\n */\nModel.addDefaultRoutes = function() {\n  if (this.shouldIncludeSchema) {\n    this.route('schema', handlers.schema);\n  }\n  this.addSchemaRoutes();\n};\n\nModel.addSchemaRoutes = function() {\n  var self = this;\n  this.schema.eachPath(function(pathName, schemaType) {\n    if (pathName.indexOf('_id') === -1 && schemaType.instance === 'ObjectID') {\n      // Right now, getting nested models is the only operation supported\n      ['get'].forEach(function(method) {\n        self.route(pathName, method , {\n          handler: handlers[method + 'Path'].call(self, pathName),\n          detail: true\n        });\n      });\n    }\n  });\n};\n\n/**\n * Adds an internal route for a path and method or methods to a function\n *\n * @param {String|Object} path: absolute path (including method) or object of routes\n * @param {String|Function} method: the method to route to or the handler function\n * @param {Function} fn: The handler function\n * @return {Model} for chaining\n * @api public\n */\nModel.route = function(path, method, fn) {\n  var route = getRoute(this.routes, path),\n      meths = methods, // Default to all methods\n      lastPath = path.substr(path.lastIndexOf('.') + 1);\n\n  if (2 === arguments.length) {\n    fn = method;\n    if (!fn.methods && endpoints.indexOf(lastPath) > -1) {\n      meths = [lastPath];\n    } else if (fn.methods) {\n      meths = fn.methods;\n    }\n  } else {\n    meths = [method];\n  }\n\n  if (fn) {\n    fn = normalizeHandler(fn);\n\n    meths.forEach(function(meth) {\n      route[meth] = merge(route[meth], fn);\n    });\n  }\n  return this;\n};\n\nModel.before = function(path, method, fn) {\n  if (2 == arguments.length) {\n    arguments[1] = { before: arguments[1] };\n  }\n  return this.route.apply(this, arguments);\n};\n\nModel.after = function(path, method, fn) {\n  if (2 == arguments.length) {\n    arguments[1] = { after: arguments[1] };\n  }\n  return this.route.apply(this, arguments);\n};\n\n/**\n * Registers all of the routes in routeObj to the given app\n *\n * TODO(baugarten): refactor to make less ugly\n *\n * if (isEndpoint(routeObj, path)) { handleRegistration(app, prefix, path, routeObj); }\n * else {\n *   for (var key in routeObj) { recurse }\n * }\n */\nModel.registerRoutes = function(app, prefix, path, routeObj) {\n  var self = this;\n  for (var key in routeObj) {\n    if (isEndpoint(routeObj, key)) {\n      var route = routeObj[key];\n      var routehandlers = _.isArray(route.handler) ? route.handler : [route.handler];\n      routehandlers = _.map(routehandlers, function(handler) { return handler.bind(self); });\n      var detailGet = !route.detail && !path && key === 'get',\n          handlerlist = route.before.concat(\n            [preprocess.bind(self)],\n            routehandlers,\n            route.after,\n            [handlers.last]\n          );\n      /**\n       * TODO(baugarten): Add an enum type-thing to specify detail route, detail optional or list\n       * aka prettify this\n       */\n      if (route.detail) {\n        app[key](prefix + '/:id([0-9a-fA-F]{0,24})' + path , handlerlist);\n      } else if (detailGet) {\n        app[key](prefix + '/:id([0-9a-fA-F]{0,24}$)?', handlerlist);\n      } else {\n        app[key](prefix + path, handlerlist);\n      }\n    } else {\n      this.registerRoutes(app, prefix, path + '/' + key, routeObj[key]);\n    }\n  }\n};\n\n/**\n * Registers this model to the given app\n *\n * This includes registering endpoints for all the methods desired\n * in the model definition\n *\n */\nModel.register = function(app, url) {\n  this.addDefaultRoutes();\n  app.getDetail = app.get;\n  this.registerRoutes(app, url, '', this.routes);\n};\n\n// Will I still support handle()? I think maybe for default routes it might be nice, but\n// exposed via model.get, model.post, etc.\n/*Model.prototype.handle = function(route, filters, data, callback) {\n  if (arguments.length === 3) {\n    callback = data;\n    data = {};\n  } else if (arguments.length === 2) {\n    callback = filters;\n    filters = [];\n    data = {};\n  }\n  route = route.replace(/\\//g, /\\./);\n  data.format = 'js';\n  var req = {\n    url: route,\n    filters: filters,\n    body: data,\n    format: 'js',\n  }\n  var res = {\n    writeHeader: function() { },\n    write: function(ret) { callback(ret); },\n    send: function() {},\n  };\n  this.send(route.split(/\\./), req, res);\n}\n\nModel.prototype.send = function(routes, req, res, next) {\n  var handler = this.routes;\n  req.quer = this.filter(req.filters, req.body, req.query, this.Model.find({}));\n  req.templatePath = this.template(routes, req.filters);\n  routes.forEach(function(route) {\n    if (route in handler) handler = handler[route];\n    else if (!('all' in handler)) {\n      handlers.respond(res, 404, handlers.respond404());\n      handlers.last(req, res);\n    }\n  });\n  if ('all' in handler) handler = handler.all;\n\n  if ('function' === typeof handler) {\n    return handler.call(this, req, res, next);\n  }\n\n  handlers.respond(res, 404, handlers.respond404());\n  handlers.last(req, res);\n}*/\n\n/**\n * Returns a query filtered by the data in the request\n * Looks in req.body and req.query to get the filterable data\n * Filters the query based on functions in valid_filters\n */\nModel.filter = function(req, quer) {\n  var detail = false; // detail route\n  // filter by id\n  if (req.params.id) {\n    quer = this.findById(req.params.id);\n    detail = true\n  }\n\n  [req.body, req.query, req.headers].forEach(function(alterableResponse) {\n    Object.keys(alterableResponse).filter(function(potential) {\n      return valid_alterables.contains(potential, quer);\n    }).forEach(function(valid_key) {\n      query = valid_alterables.filter(valid_key, alterableResponse[valid_key], quer);\n    });\n  });\n\n  if (!detail) {\n    [req.body, req.query, req.headers].forEach(function(filterableData) {\n      Object.keys(filterableData).filter(function(potential_filter) {\n        return valid_filters.contains(potential_filter, quer);\n      }).forEach(function(valid_key) {\n        quer = valid_filters.filter(valid_key, filterableData[valid_key], quer);\n      });\n    });\n  }\n  return quer;\n}\n\nfunction preprocess(req, res, next) {\n  req.body = req.body || {};\n  req.query = req.query || {};\n  req.quer = this.filter(req, this.find({}));\n  if (!('locals' in res)) {\n    res.locals = {};\n  }\n  res.locals.bundle = {};\n\n  req.templatePath = resolveTemplate(req);\n  next();\n}\n\nfunction query(key) {\n  return function(val, query) {\n    return query[key](val);\n  };\n}\n\nfunction haveOneModel(req) {\n  return !!req.params.id;\n}\n\nfunction resolveTemplate(req) {\n  var method = req.method.toLowerCase(),\n    tmplName;\n  if (methods.indexOf(method) > -1) {\n    if (haveOneModel(req) && method === 'get') {\n      method += 'Detail';\n    }\n    tmplName = lookup[method];\n  }\n  return tmplName;\n}\n\n/**\n * Merges a route with another function object\n * fn.before is called after the old before\n * fn.after is called before the old after\n * If fn.handler is specified, then route.handler is overwritten\n */\nfunction merge(route, fn) {\n  if (!route) return fn;\n\n  route.before = route.before.concat(fn.before);\n  route.handler = fn.handler || route.handler;\n  route.after = fn.after.concat(route.after);\n  return route;\n}\n\nfunction getRoute(routes, path) {\n  path = path.replace(/\\//g, /\\./).split(/\\./);\n  if (1 === path.length && '' === path[0]) { // we got the empty string\n    path = [];\n  }\n  if (endpoints.indexOf(path[path.length - 1]) > -1) {\n    path.splice(path.length - 1, 1);\n  }\n  path.forEach(function(sub, i) {\n    if (!routes[sub]) routes[sub] = {};\n    routes = routes[sub];\n  });\n  return routes;\n}\n\nfunction normalizeHandler(fn) {\n  var result = {};\n  result.handler = fn.handler;\n  result.detail = fn.detail;\n  if ({}.toString.call(fn) == '[object Function]') {\n    result = {\n      handler: fn\n    };\n  }\n  ['before', 'after'].forEach(function(hook) {\n    result[hook] = fn[hook] || [];\n    if (!Array.isArray(result[hook])) {\n      result[hook] = [ result[hook] ];\n    }\n  });\n  return result;\n}\n\nfunction isEndpoint(route, method) {\n  return endpoints.indexOf(method) > -1 && route[method].handler;\n}\n\nfunction contains(arr, key) {\n  if (arr.indexOf(key) > -1) return true;\n  for (var obj in arr) {\n    if (obj.method === key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nfunction coerceData(filter_func, data) {\n  // Assume data is a string\n  if (data && data.toLowerCase && data.toLowerCase() === 'true') {\n    return true;\n  } else if (data && data.toLowerCase && data.toLowerCase() === 'false') {\n    return false;\n  } else if (filter_func === 'limit' || filter_func === 'skip') {\n    return parseInt(data);\n  }\n  return data;\n};\n\nfunction filterable(props, subfilters) {\n  return {\n    filter: function(key, val, quer) {\n      if (props[key]) {\n        return props[key](coerceData(key, val), quer);\n      }\n      var field = key.split('__'),\n        filter_func = field[1] || 'equals',\n        data = coerceData(filter_func, val);\n\n      // Turn data into array for $in and $nin clause\n      if (filter_func === 'in' || filter_func === 'nin') {\n        data = data.split(',');\n      }\n\n      return subfilters[filter_func](data, quer.where(field[0]));\n    },\n    contains: function(key, quer) {\n      if (key in props) return true;\n      var field = key.split('__');\n      var filter_func = field[1] || 'equals';\n      return field[0] in quer.model.schema.paths && filter_func in subfilters;\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-restful/node_modules/node-restful/lib/handlers.js":"var _ = require('underscore');\nvar mongoose = require('mongoose');\n\n/*\n * The last handler to be called in the chain of middleware\n * This figures out what response format it should be in and sends it\n */\nexports.last = function(req, res, next) {\n  if (res.locals.bundle) {\n    if (req.body.format === 'js') {\n      return res.send(res.locals.bundle);\n    } else if (req.body.format === 'html' || req.query.format === 'html') {\n      return res.render(this.templateRoot + '/' + req.templatePath, res.locals.bundle);\n    } else {\n      return res.status(res.locals.status_code).json(res.locals.bundle);\n    }\n  }\n  res.send();\n};\n\nexports.schema = function(req, res, next) {\n  // We can mount a model to multiple apps, so we need to get the base url from the request url\n  var baseuri = req.url.split('/');\n  baseuri = baseuri.slice(0, baseuri.length - 1).join('/');\n  var detailuri = baseuri + '/:id';\n  exports.respond(res, 200, {\n    resource: this.modelName,\n    allowed_methods: Object.keys(this.allowed_methods),\n    list_uri: baseuri,\n    detail_uri: detailuri,\n    fields: keep(this.schema.paths, ['regExp', 'path', 'instance', 'isRequired'])\n  });\n  next();\n};\n\nexports.get = function(req, res, next) {\n  if (req.params.id && !mongoose.Types.ObjectId.isValid(req.params.id)) {\n    exports.respond(res, 404, exports.objectNotFound());\n    next();\n  } else {\n    req.quer.exec(function(err, list) {\n      if (err) {\n        exports.respond(res, 500, err);\n      } else if (req.params.id) {\n        exports.respondOrErr(res, 404, !list && exports.objectNotFound(), 200, (list && _.isArray(list)) ? list[0] : list);\n      } else {\n        exports.respondOrErr(res, 500, err, 200, list);\n      }\n      next();\n    });\n  }\n};\n\nexports.getDetail = function(req, res, next) {\n  req.quer.exec(function(err, one) {\n    exports.respondOrErr(res, 500, err, 200, one);\n    next();\n  });\n};\n\n/**\n * Generates a handler that returns the object at @param pathName\n * where pathName is the path to an objectId field\n */\nexports.getPath = function(pathName) {\n  return function(req, res, next) {\n    req.quer = req.quer.populate(pathName);\n    req.quer.exec(function(err, one) {\n      var errStatus = ((err && err.status) ? err.status : 500);\n      exports.respondOrErr(res, errStatus, err, 200, (one && one.get(pathName)) || {});\n      next();\n    });\n  };\n};\n\nexports.post = function(req, res, next) {\n  var obj = new this(req.body);\n  obj.save(function(err) {\n    exports.respondOrErr(res, 400, err, 201, obj);\n    next();\n  });\n};\n\nexports.put = function(req, res, next) {\n  // Remove immutable ObjectId from update attributes to prevent request failure\n  if (req.body._id && req.body._id === req.params.id) {\n    delete req.body._id;\n  }\n\n  // Update in 1 atomic operation on the database if not specified otherwise\n  if (this.shouldUseAtomicUpdate) {\n    req.quer.findOneAndUpdate({}, req.body, this.update_options, function(err, newObj) {\n      if (err) {\n        exports.respond(res, 500, err);\n      } else if (!newObj) {\n        exports.respond(res, 404, exports.objectNotFound());\n      } else {\n        exports.respond(res, 200, newObj);\n      }\n      next();\n    });\n  } else {\n    // Preform the update in two operations allowing mongoose to fire its schema update hook\n    req.quer.findOne({\"_id\": req.params.id}, function(err, docToUpdate) {\n      if (err) {\n        exports.respond(res, 500, err);\n      }\n      var objNotFound = !docToUpdate && exports.objectNotFound();\n      if (objNotFound) {\n        exports.respond(res, 404, objNotFound);\n        return next();\n      }\n\n      docToUpdate.set(req.body);\n      docToUpdate.save(function (err, obj) {\n        exports.respondOrErr(res, 400, err, 200, obj);\n        next();\n      });\n    });\n  }\n};\n\nexports.delete = function(req, res, next) {\n  // Delete in 1 atomic operation on the database if not specified otherwise\n  if (this.shouldUseAtomicUpdate) {\n    req.quer.findOneAndRemove({}, this.delete_options, function(err, obj) {\n      if (err) {\n        exports.respond(res, 500, err);\n      }\n      exports.respondOrErr(res, 404, !obj && exports.objectNotFound(), 204, {});\n      next();\n    });\n  } else {\n    // Preform the remove in two steps allowing mongoose to fire its schema update hook\n    req.quer.findOne({\"_id\": req.params.id}, function(err, docToRemove) {\n      if (err) {\n        exports.respond(res, 500, err);\n      }\n      var objNotFound = !docToRemove && exports.objectNotFound();\n      if (objNotFound) {\n        exports.respond(res, 404, objNotFound);\n        return next();\n      }\n\n      docToRemove.remove(function (err, obj) {\n        exports.respondOrErr(res, 400, err, 204, {});\n        next();\n      });\n    });\n  }\n};\n\n// I'm going to leave these here because it might be nice to have standardized\n// error messages for common failures\n\nexports.objectNotFound = function() {\n  return {\n    status: 404,\n    message: 'Object not found',\n    name: 'ObjectNotFound',\n    errors: {\n      _id: {\n        message: \"Could not find object with specified attributes\"\n      }\n    }\n  };\n};\nexports.respond404 = function() {\n  return {\n    status: 404,\n    message: 'Page Not Found',\n    name: \"PageNotFound\",\n    errors: 'Endpoint not found for model ' + this.modelName\n  };\n};\nexports.authFailure = function() {\n  return {\n    status: 401,\n    message: 'Unauthorized',\n    name: \"Unauthorized\",\n    errors: 'Operation not authorzed on ' + this.modelName\n  };\n};\nexports.badRequest = function(errobj) {\n  return {\n    status: 400,\n    message: 'Bad Request',\n    name: \"BadRequest\",\n    errors: errobj || \"Your request was invalid\"\n  };\n};\n\n/**\n * Takes a response, error, success statusCode and success payload\n *\n * If there is an error, it returns a 400 with the error as the payload\n * If there is no error, it returns statusCode with the specified payload\n *\n */\nexports.respondOrErr = function(res, errStatusCode, err, statusCode, content) {\n  if (err) {\n    exports.respond(res, errStatusCode, err);\n  } else {\n    exports.respond(res, statusCode, content);\n  }\n};\n\nexports.respond = function(res, statusCode, content) {\n  res.locals.status_code = statusCode;\n  res.locals.bundle = content;\n};\n\nfunction keep(obj, keepers) {\n  var result = {};\n  for (var key in obj) {\n    result[key] = {};\n    for (var key2 in obj[key]) {\n      if (keepers.indexOf(key2) > -1) {\n        result[key][key2] = obj[key][key2];\n      }\n      if ('schema' === key2) {\n        result[key][key2] = keep(obj[key][key2].paths, keepers);\n      }\n    }\n  }\n  return result;\n}\n"}